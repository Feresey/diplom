// Code generated by mockery v2.28.1. DO NOT EDIT.

package parse

import (
	context "context"

	query "github.com/Feresey/mtest/parse/query"
	mock "github.com/stretchr/testify/mock"
)

// MockQueries is an autogenerated mock type for the Queries type
type MockQueries struct {
	mock.Mock
}

type MockQueries_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueries) EXPECT() *MockQueries_Expecter {
	return &MockQueries_Expecter{mock: &_m.Mock}
}

// Columns provides a mock function with given fields: ctx, exec, tables
func (_m *MockQueries) Columns(ctx context.Context, exec query.Executor, tables []int) ([]query.Column, error) {
	ret := _m.Called(ctx, exec, tables)

	var r0 []query.Column
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.Executor, []int) ([]query.Column, error)); ok {
		return rf(ctx, exec, tables)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.Executor, []int) []query.Column); ok {
		r0 = rf(ctx, exec, tables)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]query.Column)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.Executor, []int) error); ok {
		r1 = rf(ctx, exec, tables)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueries_Columns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Columns'
type MockQueries_Columns_Call struct {
	*mock.Call
}

// Columns is a helper method to define mock.On call
//   - ctx context.Context
//   - exec query.Executor
//   - tables []int
func (_e *MockQueries_Expecter) Columns(ctx interface{}, exec interface{}, tables interface{}) *MockQueries_Columns_Call {
	return &MockQueries_Columns_Call{Call: _e.mock.On("Columns", ctx, exec, tables)}
}

func (_c *MockQueries_Columns_Call) Run(run func(ctx context.Context, exec query.Executor, tables []int)) *MockQueries_Columns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(query.Executor), args[2].([]int))
	})
	return _c
}

func (_c *MockQueries_Columns_Call) Return(_a0 []query.Column, _a1 error) *MockQueries_Columns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueries_Columns_Call) RunAndReturn(run func(context.Context, query.Executor, []int) ([]query.Column, error)) *MockQueries_Columns_Call {
	_c.Call.Return(run)
	return _c
}

// Constraints provides a mock function with given fields: ctx, exec, tables
func (_m *MockQueries) Constraints(ctx context.Context, exec query.Executor, tables []int) ([]query.Constraint, error) {
	ret := _m.Called(ctx, exec, tables)

	var r0 []query.Constraint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.Executor, []int) ([]query.Constraint, error)); ok {
		return rf(ctx, exec, tables)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.Executor, []int) []query.Constraint); ok {
		r0 = rf(ctx, exec, tables)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]query.Constraint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.Executor, []int) error); ok {
		r1 = rf(ctx, exec, tables)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueries_Constraints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Constraints'
type MockQueries_Constraints_Call struct {
	*mock.Call
}

// Constraints is a helper method to define mock.On call
//   - ctx context.Context
//   - exec query.Executor
//   - tables []int
func (_e *MockQueries_Expecter) Constraints(ctx interface{}, exec interface{}, tables interface{}) *MockQueries_Constraints_Call {
	return &MockQueries_Constraints_Call{Call: _e.mock.On("Constraints", ctx, exec, tables)}
}

func (_c *MockQueries_Constraints_Call) Run(run func(ctx context.Context, exec query.Executor, tables []int)) *MockQueries_Constraints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(query.Executor), args[2].([]int))
	})
	return _c
}

func (_c *MockQueries_Constraints_Call) Return(_a0 []query.Constraint, _a1 error) *MockQueries_Constraints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueries_Constraints_Call) RunAndReturn(run func(context.Context, query.Executor, []int) ([]query.Constraint, error)) *MockQueries_Constraints_Call {
	_c.Call.Return(run)
	return _c
}

// Enums provides a mock function with given fields: ctx, exec, enums
func (_m *MockQueries) Enums(ctx context.Context, exec query.Executor, enums []int) ([]query.Enum, error) {
	ret := _m.Called(ctx, exec, enums)

	var r0 []query.Enum
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.Executor, []int) ([]query.Enum, error)); ok {
		return rf(ctx, exec, enums)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.Executor, []int) []query.Enum); ok {
		r0 = rf(ctx, exec, enums)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]query.Enum)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.Executor, []int) error); ok {
		r1 = rf(ctx, exec, enums)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueries_Enums_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enums'
type MockQueries_Enums_Call struct {
	*mock.Call
}

// Enums is a helper method to define mock.On call
//   - ctx context.Context
//   - exec query.Executor
//   - enums []int
func (_e *MockQueries_Expecter) Enums(ctx interface{}, exec interface{}, enums interface{}) *MockQueries_Enums_Call {
	return &MockQueries_Enums_Call{Call: _e.mock.On("Enums", ctx, exec, enums)}
}

func (_c *MockQueries_Enums_Call) Run(run func(ctx context.Context, exec query.Executor, enums []int)) *MockQueries_Enums_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(query.Executor), args[2].([]int))
	})
	return _c
}

func (_c *MockQueries_Enums_Call) Return(_a0 []query.Enum, _a1 error) *MockQueries_Enums_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueries_Enums_Call) RunAndReturn(run func(context.Context, query.Executor, []int) ([]query.Enum, error)) *MockQueries_Enums_Call {
	_c.Call.Return(run)
	return _c
}

// Indexes provides a mock function with given fields: ctx, exec, tables, constraints
func (_m *MockQueries) Indexes(ctx context.Context, exec query.Executor, tables []int, constraints []int) ([]query.Index, error) {
	ret := _m.Called(ctx, exec, tables, constraints)

	var r0 []query.Index
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.Executor, []int, []int) ([]query.Index, error)); ok {
		return rf(ctx, exec, tables, constraints)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.Executor, []int, []int) []query.Index); ok {
		r0 = rf(ctx, exec, tables, constraints)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]query.Index)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.Executor, []int, []int) error); ok {
		r1 = rf(ctx, exec, tables, constraints)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueries_Indexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Indexes'
type MockQueries_Indexes_Call struct {
	*mock.Call
}

// Indexes is a helper method to define mock.On call
//   - ctx context.Context
//   - exec query.Executor
//   - tables []int
//   - constraints []int
func (_e *MockQueries_Expecter) Indexes(ctx interface{}, exec interface{}, tables interface{}, constraints interface{}) *MockQueries_Indexes_Call {
	return &MockQueries_Indexes_Call{Call: _e.mock.On("Indexes", ctx, exec, tables, constraints)}
}

func (_c *MockQueries_Indexes_Call) Run(run func(ctx context.Context, exec query.Executor, tables []int, constraints []int)) *MockQueries_Indexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(query.Executor), args[2].([]int), args[3].([]int))
	})
	return _c
}

func (_c *MockQueries_Indexes_Call) Return(_a0 []query.Index, _a1 error) *MockQueries_Indexes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueries_Indexes_Call) RunAndReturn(run func(context.Context, query.Executor, []int, []int) ([]query.Index, error)) *MockQueries_Indexes_Call {
	_c.Call.Return(run)
	return _c
}

// Tables provides a mock function with given fields: ctx, exec, patterns
func (_m *MockQueries) Tables(ctx context.Context, exec query.Executor, patterns []query.TablesPattern) ([]query.Table, error) {
	ret := _m.Called(ctx, exec, patterns)

	var r0 []query.Table
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.Executor, []query.TablesPattern) ([]query.Table, error)); ok {
		return rf(ctx, exec, patterns)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.Executor, []query.TablesPattern) []query.Table); ok {
		r0 = rf(ctx, exec, patterns)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]query.Table)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.Executor, []query.TablesPattern) error); ok {
		r1 = rf(ctx, exec, patterns)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueries_Tables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tables'
type MockQueries_Tables_Call struct {
	*mock.Call
}

// Tables is a helper method to define mock.On call
//   - ctx context.Context
//   - exec query.Executor
//   - patterns []query.TablesPattern
func (_e *MockQueries_Expecter) Tables(ctx interface{}, exec interface{}, patterns interface{}) *MockQueries_Tables_Call {
	return &MockQueries_Tables_Call{Call: _e.mock.On("Tables", ctx, exec, patterns)}
}

func (_c *MockQueries_Tables_Call) Run(run func(ctx context.Context, exec query.Executor, patterns []query.TablesPattern)) *MockQueries_Tables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(query.Executor), args[2].([]query.TablesPattern))
	})
	return _c
}

func (_c *MockQueries_Tables_Call) Return(_a0 []query.Table, _a1 error) *MockQueries_Tables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueries_Tables_Call) RunAndReturn(run func(context.Context, query.Executor, []query.TablesPattern) ([]query.Table, error)) *MockQueries_Tables_Call {
	_c.Call.Return(run)
	return _c
}

// Types provides a mock function with given fields: ctx, exec, types
func (_m *MockQueries) Types(ctx context.Context, exec query.Executor, types []int) ([]query.Type, error) {
	ret := _m.Called(ctx, exec, types)

	var r0 []query.Type
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.Executor, []int) ([]query.Type, error)); ok {
		return rf(ctx, exec, types)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.Executor, []int) []query.Type); ok {
		r0 = rf(ctx, exec, types)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]query.Type)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.Executor, []int) error); ok {
		r1 = rf(ctx, exec, types)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueries_Types_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Types'
type MockQueries_Types_Call struct {
	*mock.Call
}

// Types is a helper method to define mock.On call
//   - ctx context.Context
//   - exec query.Executor
//   - types []int
func (_e *MockQueries_Expecter) Types(ctx interface{}, exec interface{}, types interface{}) *MockQueries_Types_Call {
	return &MockQueries_Types_Call{Call: _e.mock.On("Types", ctx, exec, types)}
}

func (_c *MockQueries_Types_Call) Run(run func(ctx context.Context, exec query.Executor, types []int)) *MockQueries_Types_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(query.Executor), args[2].([]int))
	})
	return _c
}

func (_c *MockQueries_Types_Call) Return(_a0 []query.Type, _a1 error) *MockQueries_Types_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueries_Types_Call) RunAndReturn(run func(context.Context, query.Executor, []int) ([]query.Type, error)) *MockQueries_Types_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockQueries interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockQueries creates a new instance of MockQueries. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockQueries(t mockConstructorTestingTNewMockQueries) *MockQueries {
	mock := &MockQueries{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
